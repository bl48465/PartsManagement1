// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PartsManagement.Models;

namespace PartsManagement.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b39c3ac5-a875-4b00-a713-2f1866c98789",
                            ConcurrencyStamp = "a97ede1b-eee1-4754-a5ce-1fb616d5d4d8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c7199846-474c-4409-8cdc-84ff75f1fbf6",
                            ConcurrencyStamp = "02681209-49f7-4e74-be68-57305a022f39",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "efcaa32d-09e7-4f1b-bebb-51648724249a",
                            ConcurrencyStamp = "33d94854-f08b-46ea-8981-f725c5f79851",
                            Name = "Puntor",
                            NormalizedName = "PUNTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PartsManagement.Models.FaturaIN", b =>
                {
                    b.Property<int>("FaturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduktiId")
                        .HasColumnType("int");

                    b.Property<double>("Qmimi")
                        .HasColumnType("float");

                    b.Property<int>("Sasia")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FaturaId");

                    b.HasIndex("ProduktiId");

                    b.ToTable("FaturatIN");
                });

            modelBuilder.Entity("PartsManagement.Models.FaturaOUT", b =>
                {
                    b.Property<int>("FaturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProduktiId")
                        .HasColumnType("int");

                    b.Property<double>("Qmimi")
                        .HasColumnType("float");

                    b.Property<int>("Sasia")
                        .HasColumnType("int");

                    b.Property<double>("Totali")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FaturaId");

                    b.HasIndex("UserId");

                    b.ToTable("FaturatOUT");
                });

            modelBuilder.Entity("PartsManagement.Models.Furnitori", b =>
                {
                    b.Property<int>("FurnitoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokacioni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mbiemri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefoni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FurnitoriId");

                    b.HasIndex("UserId");

                    b.ToTable("Furnitoret");
                });

            modelBuilder.Entity("PartsManagement.Models.Komenti", b =>
                {
                    b.Property<int>("KomentiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PuntoriId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KomentiId");

                    b.HasIndex("UserId");

                    b.ToTable("Komentet");
                });

            modelBuilder.Entity("PartsManagement.Models.Marka", b =>
                {
                    b.Property<int>("MarkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkaId");

                    b.ToTable("Markat");

                    b.HasData(
                        new
                        {
                            MarkaId = 1,
                            Emri = "Ferrari"
                        },
                        new
                        {
                            MarkaId = 2,
                            Emri = "Audi"
                        },
                        new
                        {
                            MarkaId = 3,
                            Emri = "BMW"
                        },
                        new
                        {
                            MarkaId = 4,
                            Emri = "VolksWagen"
                        },
                        new
                        {
                            MarkaId = 5,
                            Emri = "Mercedes"
                        },
                        new
                        {
                            MarkaId = 6,
                            Emri = "Skoda"
                        },
                        new
                        {
                            MarkaId = 7,
                            Emri = "Volvo"
                        },
                        new
                        {
                            MarkaId = 8,
                            Emri = "Toyota"
                        },
                        new
                        {
                            MarkaId = 9,
                            Emri = "Mitsubishi"
                        },
                        new
                        {
                            MarkaId = 10,
                            Emri = "Porsche"
                        });
                });

            modelBuilder.Entity("PartsManagement.Models.Modeli", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.HasKey("ModelId");

                    b.HasIndex("MarkaId");

                    b.ToTable("Modelet");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            Emri = "Ferrari Ri",
                            MarkaId = 1
                        },
                        new
                        {
                            ModelId = 2,
                            Emri = "Audi A3",
                            MarkaId = 2
                        },
                        new
                        {
                            ModelId = 3,
                            Emri = "BMW 5qe",
                            MarkaId = 3
                        },
                        new
                        {
                            ModelId = 4,
                            Emri = "Golf 4shi Bajramit",
                            MarkaId = 4
                        },
                        new
                        {
                            ModelId = 5,
                            Emri = "Mercedes e class",
                            MarkaId = 5
                        },
                        new
                        {
                            ModelId = 6,
                            Emri = "Skoda octavia",
                            MarkaId = 6
                        },
                        new
                        {
                            ModelId = 7,
                            Emri = "Volvo 3.0 tdi",
                            MarkaId = 7
                        },
                        new
                        {
                            ModelId = 8,
                            Emri = "Toyota off-road",
                            MarkaId = 8
                        },
                        new
                        {
                            ModelId = 9,
                            Emri = "Mitsubishi modeli 2t",
                            MarkaId = 9
                        },
                        new
                        {
                            ModelId = 10,
                            Emri = "Porsche panamera",
                            MarkaId = 10
                        });
                });

            modelBuilder.Entity("PartsManagement.Models.Porosia", b =>
                {
                    b.Property<int>("PorosiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Klienti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sasia")
                        .HasColumnType("int");

                    b.Property<string>("Telefoni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PorosiaId");

                    b.HasIndex("UserId");

                    b.ToTable("Porosite");
                });

            modelBuilder.Entity("PartsManagement.Models.Produkti", b =>
                {
                    b.Property<int>("ProduktiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SektoriId")
                        .HasColumnType("int");

                    b.HasKey("ProduktiId");

                    b.HasIndex("MarkaId");

                    b.HasIndex("SektoriId");

                    b.ToTable("Produktet");
                });

            modelBuilder.Entity("PartsManagement.Models.Qyteti", b =>
                {
                    b.Property<int>("QytetiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShtetiId")
                        .HasColumnType("int");

                    b.HasKey("QytetiId");

                    b.HasIndex("ShtetiId");

                    b.ToTable("Qytetet");

                    b.HasData(
                        new
                        {
                            QytetiId = 1,
                            Emri = "Artanë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 2,
                            Emri = "Besianë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 3,
                            Emri = "Burim",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 4,
                            Emri = "Dardanë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 5,
                            Emri = "Decan",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 6,
                            Emri = "Dragash",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 7,
                            Emri = "Drenas",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 8,
                            Emri = "Ferizaj",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 9,
                            Emri = "Fushë Kosovë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 10,
                            Emri = "Gjakovë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 11,
                            Emri = "Gjilan",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 12,
                            Emri = "Kastriot",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 13,
                            Emri = "Kaqanik",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 14,
                            Emri = "Klinë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 15,
                            Emri = "Leposaviq",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 16,
                            Emri = "Lipjan",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 17,
                            Emri = "Malishevë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 18,
                            Emri = "Mitrovicë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 19,
                            Emri = "Pejë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 20,
                            Emri = "Prishtinë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 21,
                            Emri = "Prizren",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 22,
                            Emri = "Rahovec",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 23,
                            Emri = "Skënderaj",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 24,
                            Emri = "Shtërpcë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 25,
                            Emri = "Shtime",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 26,
                            Emri = "Therandë",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 27,
                            Emri = "Viti",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 28,
                            Emri = "Vushtrri",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 29,
                            Emri = "Zubin Potok",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 30,
                            Emri = "Zveqan",
                            ShtetiId = 1
                        },
                        new
                        {
                            QytetiId = 31,
                            Emri = "Berat",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 32,
                            Emri = "Bulqizë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 33,
                            Emri = "Delvinë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 34,
                            Emri = "Devoll",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 35,
                            Emri = "Dibër",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 36,
                            Emri = "Durrës",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 37,
                            Emri = "Elbasan",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 38,
                            Emri = "Fier",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 39,
                            Emri = "Gramsh",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 40,
                            Emri = "Gjirokastër",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 41,
                            Emri = "Has",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 42,
                            Emri = "Kavajë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 43,
                            Emri = "Kolonjë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 44,
                            Emri = "Korcë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 45,
                            Emri = "Krujë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 46,
                            Emri = "Kucovë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 47,
                            Emri = "Kukës",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 48,
                            Emri = "Kurbin",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 49,
                            Emri = "Lezhë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 50,
                            Emri = "Librazhd",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 51,
                            Emri = "Lushnjë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 52,
                            Emri = "Malësi e madhe",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 53,
                            Emri = "Mallakastër",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 54,
                            Emri = "Mat",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 55,
                            Emri = "Mirditë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 56,
                            Emri = "Peqin",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 57,
                            Emri = "Përmet",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 58,
                            Emri = "Pogradec",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 59,
                            Emri = "Pukë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 60,
                            Emri = "Sarandë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 61,
                            Emri = "Skrapar",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 62,
                            Emri = "Shkodër",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 63,
                            Emri = "Tepelenë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 64,
                            Emri = "Tiranë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 65,
                            Emri = "Tropojë",
                            ShtetiId = 2
                        },
                        new
                        {
                            QytetiId = 66,
                            Emri = "Vlorë",
                            ShtetiId = 2
                        });
                });

            modelBuilder.Entity("PartsManagement.Models.Sektori", b =>
                {
                    b.Property<int>("SektoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SektoriId");

                    b.HasIndex("UserId");

                    b.ToTable("Sektoret");
                });

            modelBuilder.Entity("PartsManagement.Models.Shitja", b =>
                {
                    b.Property<int>("ShitjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FaturaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShitjaId");

                    b.HasIndex("UserId");

                    b.ToTable("Shitjet");
                });

            modelBuilder.Entity("PartsManagement.Models.Shteti", b =>
                {
                    b.Property<int>("ShtetiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShtetiId");

                    b.ToTable("Shtetet");

                    b.HasData(
                        new
                        {
                            ShtetiId = 1,
                            Emri = "Kosovë"
                        },
                        new
                        {
                            ShtetiId = 2,
                            Emri = "Shqipëri"
                        },
                        new
                        {
                            ShtetiId = 3,
                            Emri = "Maqedoni"
                        });
                });

            modelBuilder.Entity("PartsManagement.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Emri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kompania")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mbiemri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("QytetiId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShefiId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("QytetiId");

                    b.HasIndex("ShefiId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PartsManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PartsManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartsManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PartsManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartsManagement.Models.FaturaIN", b =>
                {
                    b.HasOne("PartsManagement.Models.Produkti", "Produkti")
                        .WithMany("Faturat")
                        .HasForeignKey("ProduktiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartsManagement.Models.FaturaOUT", b =>
                {
                    b.HasOne("PartsManagement.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.Furnitori", b =>
                {
                    b.HasOne("PartsManagement.Models.User", "User")
                        .WithMany("Furnitoret")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.Komenti", b =>
                {
                    b.HasOne("PartsManagement.Models.User", "User")
                        .WithMany("Komentet")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.Modeli", b =>
                {
                    b.HasOne("PartsManagement.Models.Marka", "Marka")
                        .WithMany("Modelet")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartsManagement.Models.Porosia", b =>
                {
                    b.HasOne("PartsManagement.Models.User", "User")
                        .WithMany("Porosite")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.Produkti", b =>
                {
                    b.HasOne("PartsManagement.Models.Marka", "Marka")
                        .WithMany()
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartsManagement.Models.Sektori", "Sektori")
                        .WithMany("Produktet")
                        .HasForeignKey("SektoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartsManagement.Models.Qyteti", b =>
                {
                    b.HasOne("PartsManagement.Models.Shteti", "Shteti")
                        .WithMany("Qyteti")
                        .HasForeignKey("ShtetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PartsManagement.Models.Sektori", b =>
                {
                    b.HasOne("PartsManagement.Models.User", null)
                        .WithMany("Sektoret")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.Shitja", b =>
                {
                    b.HasOne("PartsManagement.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PartsManagement.Models.User", b =>
                {
                    b.HasOne("PartsManagement.Models.Qyteti", "Qyteti")
                        .WithMany("Users")
                        .HasForeignKey("QytetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PartsManagement.Models.User", "Shefi")
                        .WithMany("Puntoret")
                        .HasForeignKey("ShefiId");
                });
#pragma warning restore 612, 618
        }
    }
}
